""
You are given K eggs, and you have access to a building with N floors from 1 to N. 

Each egg is identical in function, and if an egg breaks, you cannot drop it again.

You know that there exists a floor F with 0 <= F <= N such that any egg dropped at a floor higher than F will break, and any egg dropped at or below floor F will not break.

Each move, you may take an egg (if you have an unbroken one) and drop it from any floor X (with 1 <= X <= N). 

Your goal is to know with certainty what the value of F is.

What is the minimum number of moves that you need to know with certainty what F is, regardless of the initial value of F?
""




class Solution {
public:
    int SuperEggDrop(int K, int N) 
    {
        auto DK = vector<vector<int>>(K+1,vector<int>(N+1,0));
        
        int m = 0;
        
        while (DK[K][m]<N)
        {
            m++;
            for (int k=1; k<=K; k++)
                DK[k][m] = DK[k-1][m-1]+1+DK[k][m-1];
        }
        return m;
    }
};
